bash -c '
# load PATH and other env vars
source /etc/profile

echo "Current OS version:" `head -1 /etc/issue 2>/dev/null`
uname -a

# explicitly set HOME in case it is overridden by sudo
HOME=/home/<%= knife_config[:ssh_user] %>

<%- if knife_config[:bootstrap_proxy]
proxy_env = "export http_proxy=#{knife_config[:bootstrap_proxy]} no_proxy=#{knife_config[:bootstrap_no_proxy]}"
%>
# add proxy setting into /etc/profile
grep -q "^export http_proxy" /etc/profile
test $? -ne 0 && echo "<%= proxy_env %>" >> /etc/profile

# export proxy setting for chef-client
<%= proxy_env %>
<%- end %>

<%- if knife_config[:bootstrap_proxy]
http, proxy_host, proxy_port = knife_config[:bootstrap_proxy].split(':')
%>
# add proxy setting for rpm command
(
cat <<'EOP'
%_httpproxy <%= proxy_host[2..-1] %>
%_httpport <%= proxy_port %>
EOP
) > ~/.rpmmacros
<%- end %>

# disable yum fastestmirror plugin since it is very slow when detecting the fastest mirror
<%= %q{sed -i "s|enabled=1|enabled=0|" /etc/yum/pluginconf.d/fastestmirror.conf} %>

# speed up yum package installation; default timeout is 30s and default retries is 10
<% yum_timeout = knife_config[:yum_timeout] || 10 %>
grep -q "^timeout=<%= yum_timeout %>" /etc/yum.conf
test $? -ne 0 &&
(
cat <<'EOP'
# speed up yum package installation
timeout=<%= yum_timeout %>
retries=5
EOP
) >> /etc/yum.conf

grep "sslverify=0" /etc/yum.conf > /dev/null
test $? -ne 0 &&
(
cat <<'EOP'
# ignore cert verification
sslverify=0
EOP
) >> /etc/yum.conf

# install chef-client
if [ ! -f /usr/bin/chef-client ]; then
  gem update --system --no-rdoc --no-ri
  gem install ohai --no-rdoc --no-ri --verbose
  gem install chef --no-rdoc --no-ri --verbose <%= bootstrap_version_string %>
fi

mkdir -p /etc/chef

# create tmp directory for bootstrap
mkdir -p /tmp/knife-bootstrap
chmod 700 /tmp/knife-bootstrap
cd /tmp/knife-bootstrap

# create release build flag on the node
touch /etc/chef/.release_build.lock

# generate /etc/chef/client.pem
<%- if @config[:client_key] %>
(
cat <<'EOP'
<%= @config[:client_key] %>
EOP
) > /tmp/knife-bootstrap/client.pem
awk NF /tmp/knife-bootstrap/client.pem > /etc/chef/client.pem
<%- end %>

<% if @chef_config[:encrypted_data_bag_secret] -%>
(
cat <<'EOP'
<%= encrypted_data_bag_secret %>
EOP
) > /tmp/encrypted_data_bag_secret
awk NF /tmp/encrypted_data_bag_secret > /etc/chef/encrypted_data_bag_secret
rm /tmp/encrypted_data_bag_secret
<% end -%>

# generate Chef Server SSL certificate on Chef Node
<%- ssl_ca_path = "/etc/chef/trusted_certs" %>
ssl_ca_path=<%= ssl_ca_path %>
mkdir -p $ssl_ca_path
<%-
home_path = `echo $HOME`.strip
Dir.glob("#{home_path}/.chefcerts/*.pem").each do |file|
  cert = File.read(file)
%>
(
cat <<'EOP'
<%= cert %>
EOP
) > <%= ssl_ca_path %>/<%= File.basename(file) %>
<%- end %>

# generate ssl certificates hash
c_rehash $ssl_ca_path >/dev/null

(
cat <<'EOP'
<%= config_content %>
log_level :info
no_lazy_load true
ssl_verify_mode :verify_peer
ssl_ca_path "<%= ssl_ca_path %>"
<%= "no_proxy          \"#{knife_config[:bootstrap_no_proxy]}\"" if knife_config[:bootstrap_no_proxy] %>
Ohai::Config[:disabled_plugins] = [:Azure, :Filesystem, :Cloudv2, :Virtualization, :Virtualizationinfo, :Dmi, :Zpools, :Blockdevice, :Lsb, :Nodejs, :Languages, :Php, :Lua, :Perl, :C, :Java, :Python, :Erlang, :Groovy, :Ruby, :Mono, :Os, :Openstack, :Cloud, :Rackspace, :Ps, :Command, :Initpackage, :Rootgroup, :Keys, :Sshhostkey, :Ohai, :Chef, :Ohaitime, :Passwd, :Gce, :Systemprofile, :Linode, :Ipscopes, :Eucalyptus, :Ec2]
EOP
) > /etc/chef/client.rb
# to be compatible with Chef Client 10
sed -i -e "s|:auto|:info|" /etc/chef/client.rb

(
cat <<'EOP'
<%= { "run_list" => @run_list, "cluster_name" => @config[:node].cluster_name, "facet_name" => @config[:node].facet_name, "facet_index" => @config[:node].facet_index }.to_json %>
EOP
) > /etc/chef/first-boot.json

# Generate script for bootstrap node and setting node status
(
cat <<'EOP'
require "json"
node = Chef::Node.load("<%= @config[:node].name %>")
# Do not to run chef-client if powered on the VM by serengeti server
machine_id = \`/usr/sbin/vmware-rpctool "machine.id.get"\`

def should_continue(machine_id)
  attrs = JSON.parse(machine_id)
  new_uuid = attrs["bootupUUID"]

  return true if new_uuid.nil?
  uuid_file_name = "/etc/serengeti_bootup_uuid"

  if File.file?("/etc/hadoop/conf/mapred.hosts.exclude")
    \`cat /dev/null > /etc/hadoop/conf/mapred.hosts.exclude\`
    \`cat /dev/null > /etc/hadoop/conf/dfs.hosts.exclude\`
  end

  if File.file?(uuid_file_name)
    file = File.new(uuid_file_name, "r+")
    old_uuid = file.gets
    if (old_uuid != new_uuid)
      file.pos=(0)
      file.write(new_uuid)
      return false
    else
      return true
    end

    file.close
  else
    file = File.new(uuid_file_name, "w")
    file.write(new_uuid)
    file.close
    return false
  end
end

def chef_client_is_running?
  return system("ps -ef | grep -v grep | grep chef-client > /dev/null")
end

if should_continue(machine_id) && !chef_client_is_running? && (node[:forbid_run_when_boot].nil? || !node[:forbid_run_when_boot])
  # run chef-client
  ret = system("source /etc/profile; <%= start_chef %> > /etc/chef/bootstrap_node.log")
  node = Chef::Node.load("<%= @config[:node].name %>")
  # set node status
  node.normal[:provision] ||= {}
  node.normal[:provision][:status] = ret ? "Service Ready" : "Bootstrap Failed"
  # set node bootstrapped
  node.normal[:provision][:bootstrapped] = ret
  node.save
end

EOP
) > /etc/chef/bootstrap_node.rb

# Let chef-client run after VM is powered on
<%- bootstrap_command = "knife exec /etc/chef/bootstrap_node.rb -c /etc/chef/client.rb > /dev/null" %>
grep "<%= bootstrap_command %>" /etc/rc.d/rc.local > /dev/null
if [ $? != 0 ]; then
(
cat <<'EOP'
# Need to set HOME explicitly due to http://tickets.opscode.com/browse/CHEF-2646
export HOME=/root
<%= bootstrap_command %>
EOP
) >> /etc/rc.d/rc.local
fi

ps -ef | grep -v "grep" | grep "chef-client"
if [ $? == 0 ]; then
   echo "chef-client is run by rc.local, kill it"
   ps -ef | grep -v "grep" | grep "chef-client" | awk '"'"'{print $2}'"'"' | xargs kill -9
fi

<%= start_chef %>
ret=$?

# the default permission of this error log file is 640 and owner/group is root
if [ -f /var/chef/cache/chef-stacktrace.out ]; then
  chmod 644 /var/chef/cache/chef-stacktrace.out
fi

# kill mingetty or serengeti-tty to force it to respawn. vm console will be refreshed after respawn
ps -ef | grep -v "grep" | grep "tty1" | awk '"'"'{print $2}'"'"' | xargs kill -9

exit $ret'
